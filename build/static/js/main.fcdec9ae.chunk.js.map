{"version":3,"sources":["actionTypes.js","components/BarsHeightInput/BarsHeightInput.jsx","components/BarsHeightInput/inputActions.js","components/BarsHeightInput/inputReducer.js","helpers/calculateWalls.js","components/Graph/Graph.jsx","components/App/App.jsx","serviceWorker.js","store.js","index.js"],"names":["BarsHeightInput","useState","input","setInput","error","setError","dispatch","useDispatch","className","type","onChange","e","target","value","onClick","event","preventDefault","RegExp","test","barsHeight","split","map","str","Number","parseInt","types","setBarsHeight","inputReducer","state","action","selectBarHeights","calculateWalls","barsArray","result","reduce","biggestA","numberA","idxA","output","biggestB","numberB","idxB","area","number","idx","Graph","barHeights","useSelector","wallIndexes","leftWall","rightWall","getWallIndexes","renderLines","height","wallClassName","includes","key","style","App","getOutput","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fcdec9ae.chunk.js","sourcesContent":["export default {\n  setBarsHeight: 'SET_BARS_HEIGHT',\n};","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setBarsHeight } from './inputActions';\nimport './BarsHeightInput.css';\n\nconst BarsHeightInput = () => {\n  const [input, setInput] = useState('');\n  const [error, setError] = useState(false);\n  const dispatch = useDispatch();\n\n  const inputChangeHandler = (e) => {\n    setInput(e.target.value);\n  }\n\n  const buttonClickHandler = (event) => {\n    event.preventDefault();\n    const regex = new RegExp(/[0-9,]+/); // TODO: rework to smth like /([0-9]),([0-9])+/\n\n    if (regex.test(input)) {\n      const barsHeightStrings = input.split(',');\n      const barsHeight = barsHeightStrings.map((str) => Number.parseInt(str));\n\n      dispatch(setBarsHeight(barsHeight));\n      if (error) setError(false);\n    } else {\n      if (!error) setError(true);\n    }\n  };\n\n  return (\n    <div className=\"bars-height-input_container\">\n      <input type=\"text\" onChange={inputChangeHandler} />\n      {error && <span className=\"error\">Please enter numbers in \"1,8,6,2,5,4,8,3,7\" format.</span>}\n      <button type=\"submit\" onClick={buttonClickHandler}>Submit</button>\n    </div>\n  );\n}\n\nexport default BarsHeightInput;\n","import types from '../../actionTypes';\n\nexport const setBarsHeight = barsHeight => ({\n  type: types.setBarsHeight,\n  barsHeight,\n});\n","import types from '../../actionTypes';\n\nexport const inputReducer = (state = { barsHeight: [1,8,6,2,5,4,8,3,7] }, action) => {\n  switch (action.type) {\n    case types.setBarsHeight:\n      return { ...state, barsHeight: action.barsHeight };\n    default:\n      return state;\n  }\n};\n\nexport default inputReducer;\n\nexport const selectBarHeights = state => state.inputReducer.barsHeight;\n","const calculateWalls = (barsArray) => {\n  const result = barsArray.reduce((biggestA, numberA, idxA) => {\n    const output = barsArray.reduce((biggestB, numberB, idxB) => {\n      if (idxB < idxA) return biggestB;\n      const area = (idxB - idxA) * (numberA > numberB ? numberB : numberA);\n\n      return area > (biggestB.area || 0)\n        ? {\n            area,\n            numberA,\n            idxA,\n            numberB,\n            idxB,\n          }\n        : biggestB;\n    }, {});\n\n    return output.area > (biggestA.area || 0)\n      ? output\n      : biggestA;\n  }, {});\n\n  return [\n    {\n      number: result.numberA,\n      idx: result.idxA,\n    },\n    {\n      number: result.numberB,\n      idx: result.idxB,\n    },\n  ];\n};\n\nexport const getWallIndexes = (barsArray) => {\n  const [leftWall, rightWall] = calculateWalls(barsArray);\n  return [leftWall.idx, rightWall.idx];\n};\n\nexport const getOutput = (barsArray) => {\n  const [leftWall, rightWall] = calculateWalls(barsArray);\n  return (rightWall.idx - leftWall.idx) * rightWall.number;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectBarHeights } from '../BarsHeightInput/inputReducer';\nimport './Graph.css';\nimport { getWallIndexes } from '../../helpers/calculateWalls';\n\nconst Graph = () => {\n  const barHeights = useSelector(selectBarHeights);\n  const wallIndexes = getWallIndexes(barHeights);\n\n  const renderLines = barHeights.map((height, idx) => {\n    const wallClassName = wallIndexes.includes(idx) ? 'graph_bar--wall' : '';\n    return (\n      <div\n        key={`${idx}th_bar_of_height_${height}`}\n        className={`graph_bar ${wallClassName}`}\n        style={{\n          height: `${height * 10}px`\n        }}\n      />\n    );\n  });\n  \n  return (\n    <div className=\"graph_container\">\n      {renderLines}\n    </div>\n  );\n}\n\nexport default Graph;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.css';\nimport BarsHeightInput from '../BarsHeightInput';\nimport Graph from '../Graph';\nimport { selectBarHeights } from '../BarsHeightInput/inputReducer';\nimport { getOutput } from '../../helpers/calculateWalls';\n\nconst App = () => {\n  const barHeights = useSelector(selectBarHeights);\n\n  return (\n    <div className=\"App\">\n      <BarsHeightInput />\n      <p className=\"output\">Output: {getOutput(barHeights)}</p>\n      <Graph />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from 'redux';\nimport inputReducer from './components/BarsHeightInput/inputReducer';\n\nconst reducers = combineReducers({\n  inputReducer,\n});\n\nconst store = createStore(reducers);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}